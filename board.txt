import { FiMoreHorizontal } from "react-icons/fi";
import Card from "../card/Card";
import Editable from "../editable/Editable";
import Dropdown from "../dropdown/Dropdown";

const Board = (props) => {
  const [showDropdown, setShowDropdown] = useState(false);
  function handleClick() {
    setShowDropdown(!showDropdown);
  }
  return (
    <div className={board.main_board}>
      <div className={board.board_top}>
        <p className={board.board_top_tittle}>
          {props.board?.title}
          <span> &nbsp;{props.board?.cards?.length}</span>
        </p>
        <div className={board.top_more}>
          <FiMoreHorizontal onClick={handleClick} />
          {showDropdown && (
            <Dropdown>
              <div className={board.dropdown}>
                <p>Delete</p>
              </div>
            </Dropdown>
          )}
        </div>
      </div>
      <div className={`${board.board_cards}  ${board.custom_scroll}`}>
        {props.board?.cards?.map((item) => (
          <Card key={item.id}  card={item}/>
        ))}
        <Editable text="Add task" placeholder="Enter Card Title" />
      </div>
    </div>
  );
};

export default Board;


import {configureStore} from '@reduxjs/toolkit'
import toDoReducer from './Slice'


export const store=configureStore({
    reducer:{ 
        toDo: toDoReducer
    }
})

//list

function List() {
  const [list, setList] = useState([
    {
      id: uuid(),
      title: "Tasks",
      cards: [
        {
          id: uuid(),
          title: "Todo",
          tasks: [],
          desc: "Hello everyone",
          date: "",
        },
        {
          id: uuid(),
          title: "Card 2",
          tasks: [],
          desc: "Do it fast",
          date: "",
        },
      ],
    },
  ]);


  const addTask = (title, bid) => {
    const card = {
      id: uuid(),
      tasks: [],
      desc: "",
      date: "",
    };
    const index = boards.findIndex((item) => item.id === bid);
    if (index < 0) return;

    const tempBoards = [...boards];
    tempBoards[index].cards.push(card);
    setBoard(tempBoards);
  };

  const deleteTask = (bid, cid) => {
    const bIndex = boards.findIndex((item) => item.id === bid);
    if (bIndex < 0) return;

    const cIndex = boards[bIndex].cards.findIndex((item) => item.id === cid);
    if (cIndex < 0) return;

    const tempBoards = [...boards];
    tempBoards[bIndex].cards.splice(cIndex, 1);
    setBoard(tempBoards);
  };

  const addBoard = (title) => {
    setBoard([
      ...boards,
      {
        id: Date.now() + Math.round(),
        title,
        cards: [],
      },
    ]);
  };
  
  const removeBoard = (bid) => {
    const tempBoards = boards.filter((item) => {
      return item.id !== bid;
    });
    setBoard(tempBoards);
  };
  return (
    <>
      <div className={style.mainLayout}>
        <div className={style.image}>
          <Navbar />
          <div className={style.outer_board}>
            <div className={style.inner_board}>
              {boards.map((item) => (
                <Board key={item.id} board={item} />
              ))}
              <Editable
                text="Add Board"
                placeholder="Enter Board Title"
                onSubmit={(value) => addBoard(value)}
              />
            </div>
          </div>
        </div>
        <Outlet />
      </div>
    </>
  );
}

export default Layout;